let db;
let SQL;
let thuFilterState = {
  dathu: false,
  chuathu: false
};


// Kh·ªüi t·∫°o SQLite v√† ki·ªÉm tra d·ªØ li·ªáu t·ª´ IndexedDB
initSqlJs({
  locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file}`
}).then(SQLLib => {
  SQL = SQLLib;

  localforage.getItem("userDB").then(buffer => {
    if (buffer instanceof Uint8Array || buffer?.length) {
      db = new SQL.Database(new Uint8Array(buffer));
      loadClasses();

      // ‚úÖ Th√™m d√≤ng n√†y ‚Äî CH·ªà G·ªåI khi DB ƒë√£ s·∫µn s√†ng
      autoExportIfNeeded();
    } else {
      setTimeout(openDbModal, 100);
    }
  });






  document.getElementById("dbfile").addEventListener("change", event => {
    const reader = new FileReader();
    reader.onload = function () {
      const uint8array = new Uint8Array(reader.result);
      db = new SQL.Database(uint8array);
      localforage.setItem("userDB", uint8array);
      localStorage.setItem("hasOpenedDb", "1"); // ‚úÖ ƒë√°nh d·∫•u ƒë√£ ch·ªçn DB
      closeDbModal();
      loadClasses();
    };

    reader.readAsArrayBuffer(event.target.files[0]);
  });
});

// H√†m ƒë·ªÉ l∆∞u c√°c thay ƒë·ªïi c∆° s·ªü d·ªØ li·ªáu
function saveToLocal() {
  if (db) {
    const data = db.export();
    localforage.setItem("userDB", data);
  }
}



// ƒê·ªãnh d·∫°ng ng√†y dd-mm-yy
function formatDate(isoDate) {
  const d = new Date(isoDate);
  const dd = String(d.getDate()).padStart(2, '0');
  const mm = String(d.getMonth() + 1).padStart(2, '0');
  const yy = String(d.getFullYear()).slice(-2);
  return `${dd}-${mm}-${yy}`;
}

function loadClasses(selectedClassId = null) {
  const tabs = document.getElementById("tabs");
  const contents = document.getElementById("tabContents");
  tabs.innerHTML = "";
  contents.innerHTML = "";

  let classes;
  try {
    classes = db.exec("SELECT class_id, class_name FROM Classes");
  } catch (err) {
    tabs.innerHTML = "<p>L·ªói: " + err.message + "</p>";
    return;
  }

  if (!classes.length) {
    tabs.innerHTML = "<p>Kh√¥ng c√≥ l·ªõp h·ªçc n√†o.</p>";
    return;
  }

  classes[0].values.forEach(([classId, className], index) => {
    const tabBtn = document.createElement("div");
    tabBtn.className = "tab-button";
    tabBtn.textContent = className;
    tabBtn.dataset.classId = classId;
    tabBtn.onclick = () => switchTab(classId);

    // ‚úÖ Ch·ªçn ƒë√∫ng l·ªõp ƒë∆∞·ª£c truy·ªÅn v√†o (n·∫øu c√≥), n·∫øu kh√¥ng th√¨ m·∫∑c ƒë·ªãnh l·ªõp ƒë·∫ßu ti√™n
    const isActive = selectedClassId ? classId == selectedClassId : index === 0;
    if (isActive) tabBtn.classList.add("active");

    tabs.appendChild(tabBtn);

    const contentDiv = document.createElement("div");
    contentDiv.className = "tab-content" + (isActive ? " active" : "");
    contentDiv.id = `tab-${classId}`;
    contents.appendChild(contentDiv);

    if (isActive) {
      showClassData(classId);
      updateThuHocPhiThongKe(classId); // üëà TH√äM D√íNG N√ÄY
    }

  });
}


function switchTab(classId) {
  document.querySelectorAll(".tab-button").forEach(btn => {
    btn.classList.toggle("active", btn.dataset.classId == classId);
  });
  document.querySelectorAll(".tab-content").forEach(div => {
    div.classList.toggle("active", div.id === `tab-${classId}`);
  });
  showClassData(classId);
    // ‚úÖ C·∫≠p nh·∫≠t th·ªëng k√™ thu h·ªçc ph√≠
  updateThuHocPhiThongKe(classId);
}


// Hi·ªÉn th·ªã b·∫£ng danh s√°ch h·ªçc sinh
function showClassData(classId, filter = null) {
  const container = document.getElementById(`tab-${classId}`);
  container.innerHTML = "<p>ƒêang t·∫£i...</p>";

  try {
    // ‚úÖ L·∫•y danh s√°ch h·ªçc sinh
    let query = `SELECT student_id, student_name, noptien FROM Students WHERE class_id = ${classId}`;
    if (filter !== null) {
      query += ` AND noptien = ${filter}`;
    }
    const studentResult = db.exec(query);
    const students = studentResult[0]?.values || [];



    // ‚úÖ L·∫•y danh s√°ch ng√†y ƒëi·ªÉm danh
    const datesResult = db.exec(`
      SELECT DISTINCT attendance_date FROM Attendance
      WHERE class_id = ${classId} AND status = 1
      ORDER BY attendance_date ASC
    `);
    const allDates = datesResult[0]?.values.map(r => r[0]) || [];

    // ‚úÖ L·∫•y th√¥ng tin l·ªõp
    const classInfoRes = db.exec(`
      SELECT class_name, class_hocphi, class_time, class_diadiem
      FROM Classes
      WHERE class_id = ${classId}
    `);
    const [class_name, class_hocphi, class_time, class_diadiem] = classInfoRes[0]?.values[0] || [];

    // ‚úÖ T·∫°o d√≤ng th√¥ng tin l·ªõp
    const infoDiv = document.createElement("div");
    infoDiv.style.margin = "-10px 0 10px 0";
    infoDiv.style.fontWeight = "normal";
    infoDiv.style.padding = "10px";
    infoDiv.style.background = "#f1f9ff";
    infoDiv.style.border = "1px solid #ccc";
    infoDiv.style.borderRadius = "6px";
    infoDiv.style.textAlign = "center";
    infoDiv.textContent =
      `L·ªõp: ${class_name} - T·ªïng s·ªë: ${students.length} h·ªçc sinh - H·ªçc ph√≠: ${Number(class_hocphi).toLocaleString()}‚Ç´ - Th·ªùi gian: ${class_time} - ƒê·ªãa ƒëi·ªÉm: ${class_diadiem}`;

    // ‚úÖ T·∫°o b·∫£ng
    const table = document.createElement("table");
    table.border = "1";
    table.cellPadding = "5";
    table.style.borderCollapse = "collapse";
    table.style.minWidth = "100%";
    table.style.overflowX = "auto";

    const thead = document.createElement("thead");
    const headRow = document.createElement("tr");
    ["H·ªç v√† t√™n", "S·ªë bu·ªïi", "S·ªë ti·ªÅn", ...allDates.map(formatDate)].forEach(title => {
      const th = document.createElement("th");
      th.textContent = title;
      headRow.appendChild(th);
    });
    thead.appendChild(headRow);
    table.appendChild(thead);

    const tbody = document.createElement("tbody");

    for (let index = 0; index < students.length; index++) {
      const [student_id, student_name] = students[index];
      const row = document.createElement("tr");

        // G·∫Øn class ƒë·ªÉ highlight n·∫øu l√† h·ªçc sinh v·ª´a ƒëi·ªÉm danh
        if (
          window.lastDiemDanh &&
          String(window.lastDiemDanh.classId) === String(classId) &&
          String(window.lastDiemDanh.studentId) === String(student_id)
        ) {
          row.classList.add("just-updated");
          setTimeout(() => {
            row.classList.remove("just-updated");
          }, 1000); // hi·ªáu ·ª©ng 1 gi√¢y
        }

        // Highlight h·ªçc sinh v·ª´a thu h·ªçc ph√≠
        if (
          window.lastDiemDanh &&
          String(window.lastDiemDanh.classId) === String(classId) &&
          String(window.lastDiemDanh.studentId) === String(student_id)
        ) {
          row.classList.add("just-updated");
          setTimeout(() => {
            row.classList.remove("just-updated");
          }, 1000);
        }

      // ‚úÖ T√¥ m√†u xen k·∫Ω
      row.style.backgroundColor = index % 2 === 0 ? "#ffffff" : "#f0faff";

      // H·ªç v√† t√™n
      const tdName = document.createElement("td");
      tdName.textContent = student_name;
      row.appendChild(tdName);

      // S·ªë bu·ªïi ƒëi·ªÉm danh
      const buoiRes = db.exec(`
        SELECT COUNT(*) FROM Attendance
        WHERE student_id = ${student_id} AND class_id = ${classId} AND status = 1
      `);
      const soBuoi = buoiRes[0]?.values[0][0] || 0;

      const tdBuoi = document.createElement("td");
      tdBuoi.textContent = soBuoi;
      tdBuoi.style.textAlign = "center";
      row.appendChild(tdBuoi);

      // S·ªë ti·ªÅn = s·ªë bu·ªïi x h·ªçc ph√≠
      const soTien = soBuoi * class_hocphi;
      const tdTien = document.createElement("td");
      tdTien.textContent = soTien.toLocaleString() + " ƒë";
      tdTien.style.textAlign = "center";
      row.appendChild(tdTien);

      // C·ªôt c√°c ng√†y ƒëi·ªÉm danh
      for (const date of allDates) {
        const ddRes = db.exec(`
          SELECT 1 FROM Attendance
          WHERE student_id = ${student_id} AND class_id = ${classId}
          AND attendance_date = '${date}' AND status = 1
        `);
        const td = document.createElement("td");
        td.style.textAlign = "center";

        if (ddRes.length > 0) {
          td.textContent = "üü¢";
        } else {
          td.textContent = "‚ùå";
          td.style.color = "red";
        }

        // ‚úÖ G·∫Øn class just-marked n·∫øu ƒë√∫ng h·ªçc sinh + ng√†y v·ª´a ƒëi·ªÉm danh
        if (
          window.lastDiemDanh &&
          String(window.lastDiemDanh.classId) === String(classId) &&
          String(window.lastDiemDanh.studentId) === String(student_id) &&
          window.lastDiemDanh.date === date
        ) {
          td.classList.add("just-marked");
        }

        row.appendChild(td);
      }


      tbody.appendChild(row);
    }

    table.appendChild(tbody);

    // ‚úÖ Hi·ªÉn th·ªã l√™n giao di·ªán
    container.innerHTML = "";
    container.appendChild(infoDiv);   // d√≤ng th√¥ng tin l·ªõp
    container.appendChild(table);     // b·∫£ng h·ªçc sinh

    setTimeout(() => {
      const targetRow = document.querySelector(`#tab-${classId} tr.just-updated`);
      if (targetRow && window.lastDiemDanh?.active === true) {
        const rect = targetRow.getBoundingClientRect();

        const scrollX = window.scrollX + rect.left + rect.width - window.innerWidth + 32;
        const scrollY = window.scrollY + rect.top + rect.height - window.innerHeight + 120;

        window.scrollTo({
          left: scrollX > 0 ? scrollX : 0,
          top: scrollY > 0 ? scrollY : 0,
          behavior: "smooth"
        });

        window.lastDiemDanh = null; // reset ƒë·ªÉ tr√°nh cu·ªôn sai l·∫ßn sau
      }
    }, 100);



    
  } catch (err) {
    container.innerHTML = "<p style='color:red'>L·ªói hi·ªÉn th·ªã d·ªØ li·ªáu: " + err.message + "</p>";
  }
}


// ‚úÖ H√†m x·ª≠ l√Ω m·ªü menu (cho mobile)
document.addEventListener("DOMContentLoaded", () => {
  const toggleBtn = document.getElementById("menuToggle");
  const menuBar = document.querySelector(".menu-bar");

  if (toggleBtn && menuBar) {
    toggleBtn.addEventListener("click", () => {
      menuBar.classList.toggle("open");
    });
  }

  // üëá Th√™m ƒëo·∫°n n√†y ƒë·ªÉ c·∫≠p nh·∫≠t th·ªëng k√™ khi v·ª´a v√†o trang
  const classId = document.querySelector(".tab-button.active")?.dataset.classId;
  if (classId) {
    updateThuHocPhiThongKe(classId);
  }
});


// ‚úÖ H√†m m·ªü/ƒë√≥ng submenu (cho iPhone)
function toggleSubmenu(el) {
  const li = el.parentElement;
  const openMenus = document.querySelectorAll(".has-submenu.open");

  openMenus.forEach(menu => {
    if (menu !== li) menu.classList.remove("open");
  });

  li.classList.toggle("open");
}



// T·ª± ƒë·ªông ƒë√≥n menu con khi ch·∫°m ra ngo√†i
// ƒê√≥ng t·∫•t c·∫£ submenu khi click ra ngo√†i
document.addEventListener("click", function (e) {
  const isMenuToggle = e.target.closest(".has-submenu");
  if (!isMenuToggle) {
    document.querySelectorAll(".has-submenu.open").forEach(el => {
      el.classList.remove("open");
    });
  }
});
document.addEventListener("touchstart", function (e) {
  const isMenuToggle = e.target.closest(".has-submenu");
  if (!isMenuToggle) {
    document.querySelectorAll(".has-submenu.open").forEach(el => {
      el.classList.remove("open");
    });
  }
});


function toggleSubmenu(el) {
  const li = el.closest(".has-submenu");

  // N·∫øu menu ƒëang m·ªü ‚Üí ƒë√≥ng l·∫°i
  const isOpen = li.classList.contains("open");

  // ƒê√≥ng t·∫•t c·∫£ menu kh√°c
  document.querySelectorAll(".has-submenu.open").forEach(menu => {
    menu.classList.remove("open");
  });

  // N·∫øu menu ƒë√≥ ch∆∞a m·ªü th√¨ m·ªü n√≥
  if (!isOpen) {
    li.classList.add("open");
  }
}

// ƒê√≥ng t·∫•t c·∫£ menu khi click/ch·∫°m ra ngo√†i
document.addEventListener("click", function (e) {
  if (!e.target.closest(".has-submenu")) {
    document.querySelectorAll(".has-submenu.open").forEach(menu => {
      menu.classList.remove("open");
    });
  }
});

document.addEventListener("touchstart", function (e) {
  if (!e.target.closest(".has-submenu")) {
    document.querySelectorAll(".has-submenu.open").forEach(menu => {
      menu.classList.remove("open");
    });
  }
});

// Khi ch·ªçn menu con, ·∫©n t·∫•t c·∫£ menu cha
function onMenuAction(action) {
  // ·∫®n menu ƒëang m·ªü
  document.querySelectorAll(".has-submenu.open").forEach(menu => {
    menu.classList.remove("open");
  });
}

document.addEventListener("click", function (e) {
  const clickedInsideMenu = e.target.closest(".menu-bar") || e.target.closest("#menuToggle");

  if (!clickedInsideMenu) {
    // Thu menu con
    document.querySelectorAll(".has-submenu.open").forEach(menu => {
      menu.classList.remove("open");
    });

    // N·∫øu ƒëang tr√™n thi·∫øt b·ªã nh·ªè ‚Üí ·∫©n lu√¥n menu ch√≠nh
    const menuBar = document.querySelector(".menu-bar");
    if (window.innerWidth <= 768 && menuBar.classList.contains("open")) {
      menuBar.classList.remove("open");
    }
  }
});

document.addEventListener("touchstart", function (e) {
  const touchedInsideMenu = e.target.closest(".menu-bar") || e.target.closest("#menuToggle");

  if (!touchedInsideMenu) {
    // Thu menu con
    document.querySelectorAll(".has-submenu.open").forEach(menu => {
      menu.classList.remove("open");
    });

    // ·∫®n menu ch√≠nh n·∫øu ƒëang m·ªü tr√™n thi·∫øt b·ªã nh·ªè
    const menuBar = document.querySelector(".menu-bar");
    if (window.innerWidth <= 768 && menuBar.classList.contains("open")) {
      menuBar.classList.remove("open");
    }
  }
});



// Form ƒêi·ªÉm danh
function handleDiemDanh() {
  document.getElementById("diemdanhModal").style.display = "flex";

  // T·ª± ƒë·ªông ch·ªçn h√¥m nay
  const today = new Date().toISOString().split("T")[0];
  document.getElementById("dd-date").value = today;

  // T·∫£i danh s√°ch l·ªõp v√†o select
  const classSelect = document.getElementById("dd-class");
  classSelect.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const allClasses = result[0].values;

  // T√¨m class_id ƒëang ƒë∆∞·ª£c ch·ªçn trong tabs
  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  allClasses.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;

    // ‚úÖ T·ª± ƒë·ªông ch·ªçn l·ªõp ƒëang ƒë∆∞·ª£c ch·ªçn ·ªü tab
    if (id == activeClassId) {
      opt.selected = true;
    }

    classSelect.appendChild(opt);
  });

  loadStudentsForClass(); // Load h·ªçc sinh theo l·ªõp v·ª´a ch·ªçn
}


function closeDiemDanh() {
  document.getElementById("diemdanhModal").style.display = "none";
}

function loadStudentsForClass() {
  const classId = document.getElementById("dd-class").value;
  const studentSelect = document.getElementById("dd-student");
  studentSelect.innerHTML = "";

  const result = db.exec(`SELECT student_id, student_name FROM Students WHERE class_id = ${classId}`);
  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    studentSelect.appendChild(opt);
  });
}

function submitDiemDanh(status) {
  const classId = document.getElementById("dd-class").value;
  const studentSelect = document.getElementById("dd-student");
  const studentId = studentSelect.value;
  const date = document.getElementById("dd-date").value;

  // Xo√° b·∫£n ghi c≈© n·∫øu c√≥
  const check = db.exec(`
    SELECT * FROM Attendance
    WHERE class_id = ${classId} AND student_id = ${studentId} AND attendance_date = '${date}'
  `);
  if (check.length > 0) {
    db.run(`
      DELETE FROM Attendance
      WHERE class_id = ${classId} AND student_id = ${studentId} AND attendance_date = '${date}'
    `);
  }

  // Ch·ªâ th√™m m·ªõi n·∫øu kh√¥ng ph·∫£i h·ªßy
  if (status === 0 || status === 1) {
    db.run(`
      INSERT INTO Attendance (class_id, student_id, attendance_date, status)
      VALUES (${classId}, ${studentId}, '${date}', ${status})
    `);
  }
 // ‚úÖ L∆∞u l·∫°i thay ƒë·ªïi
  saveToLocal();

  // Ghi nh·ªõ th√¥ng tin ƒë·ªÉ scroll ƒë·∫øn
  window.lastDiemDanh = {
    classId,
    studentId,
    date,
    active: true // üü¢ ƒê√°nh d·∫•u l√† ƒëi·ªÉm danh
  };


  // ‚úÖ C·∫≠p nh·∫≠t b·∫£ng ngay sau m·ªói ƒëi·ªÉm danh
  showClassData(classId);

  // ‚úÖ C·∫≠p nh·∫≠t th·ªëng k√™ thu h·ªçc ph√≠
  updateThuHocPhiThongKe(classId);

  // ‚úÖ Chuy·ªÉn sang h·ªçc sinh ti·∫øp theo ho·∫∑c k·∫øt th√∫c
  const nextIndex = studentSelect.selectedIndex + 1;
  if (nextIndex < studentSelect.options.length) {
    studentSelect.selectedIndex = nextIndex;
  } else {
    // ‚úÖ C·∫≠p nh·∫≠t b·∫£ng r·ªìi m·ªõi th√¥ng b√°o
    setTimeout(() => {
      alert("‚úÖ ƒê√£ ƒëi·ªÉm danh xong");
      closeDiemDanh();
    }, 10);
  }
}


// Th√™m l·ªõp
function handleThemLop() {
  document.getElementById("themLopModal").style.display = "flex";
  // X√≥a to√†n b·ªô n·ªôi dung ƒë√£ nh·∫≠p tr∆∞·ªõc ƒë√≥
  document.getElementById("lop-ten").value = "";
  document.getElementById("lop-hocphi").value = "";
  document.getElementById("lop-ngay").value = new Date().toISOString().split("T")[0]; // G√°n m·∫∑c ƒë·ªãnh h√¥m nay
  document.getElementById("lop-thoigian").value = "";
  document.getElementById("lop-diadiem").value = "";
}


function closeThemLop() {
  document.getElementById("themLopModal").style.display = "none";
}

function submitThemLop() {
  const tenRaw = document.getElementById("lop-ten").value.trim();
  const ten = capitalizeWords(tenRaw);
  const ngay = document.getElementById("lop-ngay").value;
  const hocphiValue = document.getElementById("lop-hocphi").value.trim();
  const hocphi = parseInt(hocphiValue);
  const thoigian = document.getElementById("lop-thoigian").value.trim();
  const diadiem = document.getElementById("lop-diadiem").value.trim();

  let messages = [];

  if (!ten) {
    messages.push("T√™n l·ªõp");
  }

  // Ki·ªÉm tra ng∆∞·ªùi d√πng ch∆∞a nh·∫≠p g√¨ ho·∫∑c nh·∫≠p sai (vd: ch·ªØ)
  if (!hocphiValue || isNaN(hocphi)) {
    messages.push("H·ªçc ph√≠");
  }

  if (messages.length > 0) {
    alert("Vui l√≤ng nh·∫≠p: " + messages.join(" v√† "));
    return;
  }

  // Th√™m v√†o CSDL
  db.run(`
    INSERT INTO Classes (class_name, class_date_start, class_hocphi, class_time, class_diadiem)
    VALUES (?, ?, ?, ?, ?)
  `, [ten, ngay, hocphi, thoigian, diadiem]);

  // L·∫•y ID v·ª´a th√™m
  const result = db.exec(`SELECT seq FROM sqlite_sequence WHERE name='Classes'`);
  const newClassId = result?.[0]?.values?.[0]?.[0];

  saveToLocal();
  closeThemLop();
  loadClasses(newClassId);
}




// S·ª≠a l·ªõp
function handleSuaLop() {
  document.getElementById("suaLopModal").style.display = "flex";

  const classSelect = document.getElementById("edit-class-select");
  classSelect.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const allClasses = result[0].values;

  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  allClasses.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) opt.selected = true;
    classSelect.appendChild(opt);
  });

  loadLopInfoToForm();
}

function closeSuaLop() {
  document.getElementById("suaLopModal").style.display = "none";
}

function loadLopInfoToForm() {
  const classId = document.getElementById("edit-class-select").value;
  const result = db.exec(`
    SELECT class_name, class_date_start, class_hocphi, class_time, class_diadiem
    FROM Classes WHERE class_id = ${classId}
  `);

  if (result.length === 0) return;

  const [ten, ngay, hocphi, thoigian, diadiem] = result[0].values[0];

  document.getElementById("edit-ten").value = ten;
  document.getElementById("edit-ngay").value = ngay;
  document.getElementById("edit-hocphi").value = hocphi;
  document.getElementById("edit-thoigian").value = thoigian;
  document.getElementById("edit-diadiem").value = diadiem;
    // ‚úÖ Ch·ªçn tab t∆∞∆°ng ·ª©ng khi ch·ªçn l·ªõp
  switchTab(classId);
}

function submitSuaLop() {
  const classId = document.getElementById("edit-class-select").value;
  const rawTen = document.getElementById("edit-ten").value.trim();
  const ten = capitalizeWords(rawTen);
  const ngay = document.getElementById("edit-ngay").value;
  const hocphi = parseInt(document.getElementById("edit-hocphi").value) || 0;
  const thoigian = document.getElementById("edit-thoigian").value.trim();
  const diadiem = document.getElementById("edit-diadiem").value.trim();

  if (!ten || !ngay) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß T√™n l·ªõp v√† Ng√†y b·∫Øt ƒë·∫ßu.");
    return;
  }

  db.run(`
    UPDATE Classes
    SET class_name = ?, class_date_start = ?, class_hocphi = ?, class_time = ?, class_diadiem = ?
    WHERE class_id = ?
  `, [ten, ngay, hocphi, thoigian, diadiem, classId]);

  saveToLocal();
  closeSuaLop();

  // ‚úÖ Load l·∫°i danh s√°ch l·ªõp v√† ch·ªçn ƒë√∫ng l·ªõp v·ª´a s·ª≠a
  loadClasses(classId);
}


// X√≥a l·ªõp
function handleXoaLop() {
  document.getElementById("xoaLopModal").style.display = "flex";

  const select = document.getElementById("xoa-class-select");
  select.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  let selectedClassId = null;

  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) {
      opt.selected = true;
      selectedClassId = id;
    }
    select.appendChild(opt);
  });

  // ‚úÖ Chuy·ªÉn tab l·ªõp t∆∞∆°ng ·ª©ng
  if (selectedClassId) {
    switchTab(selectedClassId);
  }
}

function closeXoaLop() {
  document.getElementById("xoaLopModal").style.display = "none";
}

function submitXoaLop() {
  const classId = document.getElementById("xoa-class-select").value;

  // Xo√° l·ªõp v√† d·ªØ li·ªáu li√™n quan
  db.run(`DELETE FROM Classes WHERE class_id = ?`, [classId]);
  db.run(`DELETE FROM Students WHERE class_id = ?`, [classId]);
  db.run(`DELETE FROM Attendance WHERE class_id = ?`, [classId]);

  saveToLocal();
  closeXoaLop();
  loadClasses(); // Kh√¥ng truy·ªÅn classId v√¨ l·ªõp ƒë√£ b·ªã xo√°
}

// Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu trong t√™n h·ªçc sinh
  function capitalizeWords(str) {
    return str
      .toLocaleLowerCase('vi-VN')
      .split(' ')
      .filter(word => word) // b·ªè kho·∫£ng tr·∫Øng th·ª´a
      .map(word => word.charAt(0).toLocaleUpperCase('vi-VN') + word.slice(1))
      .join(' ');
  }




// Th√™m h·ªçc sinh
function handleThemHs() {
  document.getElementById("themHsModal").style.display = "flex";

  const select = document.getElementById("hs-class-select");
  select.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) opt.selected = true;
    select.appendChild(opt);
  });

  // ‚úÖ Focus v√†o tr∆∞·ªùng t√™n v√† x√≥a t√™n (n·∫øu c√≥)
  const tenInput = document.getElementById("hs-ten");
  tenInput.value = ""; // ‚úÖ Xo√° n·ªôi dung c≈©

  setTimeout(() => {
    tenInput.focus();
  }, 10);
}


function closeThemHs() {
  document.getElementById("themHsModal").style.display = "none";
}

function submitThemHs() {
  const classId = document.getElementById("hs-class-select").value;
  const tenInput = document.getElementById("hs-ten");
  const tenRaw = tenInput.value.trim();
  const ten = capitalizeWords(tenRaw);


  if (!ten) {
    alert("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n h·ªçc sinh.");
    return;
  }

  // Th√™m h·ªçc sinh
  db.run(`
    INSERT INTO Students (student_name, class_id)
    VALUES (?, ?)
  `, [ten, classId]);

  saveToLocal();
  loadClasses(classId); // c·∫≠p nh·∫≠t tab ƒëang m·ªü n·∫øu c·∫ßn

  // ‚úÖ Kh√¥ng ƒë√≥ng form ‚Äî m√† reset tr∆∞·ªùng t√™n
  tenInput.value = ""; // ‚úÖ xo√° n·ªôi dung
  tenInput.focus();    // ‚úÖ ƒë·∫∑t l·∫°i con tr·ªè
}



// S·ª≠a h·ªçc sinh
function handleSuaHs() {
  document.getElementById("suaHsModal").style.display = "flex";

  const classSelect = document.getElementById("edit-hs-class");
  classSelect.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) opt.selected = true;
    classSelect.appendChild(opt);
  });

  // ‚úÖ Load l·∫°i danh s√°ch l·ªõp tr∆∞·ªõc ƒë·ªÉ tab ch·∫Øc ch·∫Øn t·ªìn t·∫°i
  const selectedClassId = classSelect.value;
  loadClasses(selectedClassId);

  setTimeout(() => {
    loadStudentsForEdit();
  }, 50); // delay nh·ªè ƒë·ªÉ tabs ƒë∆∞·ª£c t·∫°o
}


function closeSuaHs() {
  document.getElementById("suaHsModal").style.display = "none";
}

function loadStudentsForEdit() {
  const classId = document.getElementById("edit-hs-class").value;
  const studentSelect = document.getElementById("edit-hs-select");
  studentSelect.innerHTML = "";

  const result = db.exec(`SELECT student_id, student_name FROM Students WHERE class_id = ${classId}`);
  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    studentSelect.appendChild(opt);
  });

  fillOldStudentName(); // t·ª± ƒë·ªông ƒëi·ªÅn t√™n hi·ªán t·∫°i v√†o √¥ s·ª≠a
  // ‚úÖ ƒê·∫£m b·∫£o tab ƒë√£ ƒë∆∞·ª£c t·∫°o r·ªìi m·ªõi nh·∫£y
  setTimeout(() => {
    if (document.querySelector(`.tab-button[data-class-id="${classId}"]`)) {
      switchTab(classId);
    }
  }, 0);
}

function fillOldStudentName() {
  const studentSelect = document.getElementById("edit-hs-select");
  const selectedOption = studentSelect.options[studentSelect.selectedIndex];
  document.getElementById("edit-hs-name").value = selectedOption ? selectedOption.textContent : "";
}

function submitSuaHs() {
  const studentId = document.getElementById("edit-hs-select").value;
  const rawName = document.getElementById("edit-hs-name").value.trim();
  const newName = capitalizeWords(rawName);
  const classId = document.getElementById("edit-hs-class").value;

  if (!newName) {
    alert("Vui l√≤ng nh·∫≠p t√™n m·ªõi.");
    return;
  }

  db.run(`UPDATE Students SET student_name = ? WHERE student_id = ?`, [newName, studentId]);

  saveToLocal();
  closeSuaHs();
  loadClasses(classId); // c·∫≠p nh·∫≠t l·∫°i tab l·ªõp n·∫øu ƒëang m·ªü
}


// X√ìa h·ªçc sinh
function handleXoaHs() {
  document.getElementById("xoaHsModal").style.display = "flex";

  const classSelect = document.getElementById("xoa-hs-class");
  classSelect.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) opt.selected = true;
    classSelect.appendChild(opt);
  });

  // üõ† Thay ƒë·ªïi: lu√¥n load tab v√† danh s√°ch l·∫°i
  const selectedClassId = classSelect.value;
  loadClasses(selectedClassId);  // <- ƒê·∫£m b·∫£o tab ƒë∆∞·ª£c t·∫°o

  setTimeout(() => {
    loadStudentsForXoa();
  }, 50); // delay nh·ªè ƒë·ªÉ ch·ªù DOM render tabs
}


function closeXoaHs() {
  document.getElementById("xoaHsModal").style.display = "none";
}

function loadStudentsForXoa() {
  const classId = document.getElementById("xoa-hs-class").value;
  const studentSelect = document.getElementById("xoa-hs-select");
  studentSelect.innerHTML = "";

  const result = db.exec(`SELECT student_id, student_name FROM Students WHERE class_id = ${classId}`);
  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    studentSelect.appendChild(opt);
  });
  // ‚úÖ ƒê·∫£m b·∫£o tab l·ªõp nh·∫£y ƒë√∫ng k·ªÉ c·∫£ khi kh√¥ng c√≥ h·ªçc sinh
  setTimeout(() => {
    if (document.querySelector(`.tab-button[data-class-id="${classId}"]`)) {
      switchTab(classId);
    }
  }, 0);
}

function submitXoaHs() {
  const studentId = document.getElementById("xoa-hs-select").value;
  const classId = document.getElementById("xoa-hs-class").value;

  // Xo√° h·ªçc sinh v√† d·ªØ li·ªáu li√™n quan
  db.run(`DELETE FROM Students WHERE student_id = ?`, [studentId]);
  db.run(`DELETE FROM Attendance WHERE student_id = ?`, [studentId]);
  db.run(`DELETE FROM Thuhocphi WHERE student_id = ?`, [studentId]);

  saveToLocal();
  closeXoaHs();
  loadClasses(classId); // c·∫≠p nh·∫≠t l·∫°i tab n·∫øu c·∫ßn
}


// S·ª≠a ng√†y ƒëi·ªÉm danh
function handleSuaNgay() {
  document.getElementById("suaNgayModal").style.display = "flex";

  const select = document.getElementById("sua-ngay-class");
  select.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const activeTab = document.querySelector(".tab-button.active");
  const activeClassId = activeTab ? activeTab.dataset.classId : null;

  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) opt.selected = true;
    select.appendChild(opt);
  });

  loadDatesForClass();
}

function closeSuaNgay() {
  document.getElementById("suaNgayModal").style.display = "none";
}

function loadDatesForClass() {
  const classId = document.getElementById("sua-ngay-class").value;
  const select = document.getElementById("sua-ngay-cu");
  select.innerHTML = "";

  const result = db.exec(`
    SELECT DISTINCT substr(attendance_date, 1, 10)
    FROM Attendance
    WHERE class_id = ${classId}
    ORDER BY attendance_date ASC
  `);

  result[0]?.values.forEach(([date]) => {
    const opt = document.createElement("option");
    opt.value = date;
    opt.textContent = formatDate(date); // dd-mm-yy
    select.appendChild(opt);
  });

  // ‚úÖ Ch·ªçn tab t∆∞∆°ng ·ª©ng khi ch·ªçn l·ªõp
  switchTab(classId);
}


function submitSuaNgay() {
  const classId = document.getElementById("sua-ngay-class").value;
  const oldDate = document.getElementById("sua-ngay-cu").value;
  const newDate = document.getElementById("sua-ngay-moi").value;

  if (!oldDate || !newDate) {
    alert("Vui l√≤ng ch·ªçn ƒë·ªß ng√†y c≈© v√† ng√†y m·ªõi.");
    return;
  }

  db.run(`
    UPDATE Attendance
    SET attendance_date = ?
    WHERE class_id = ? AND substr(attendance_date, 1, 10) = ?
  `, [newDate, classId, oldDate]);

  saveToLocal();
  closeSuaNgay();
  loadClasses(classId);
}

function submitXoaNgay() {
  const classId = document.getElementById("sua-ngay-class").value;
  const date = document.getElementById("sua-ngay-cu").value;

  if (!date) {
    alert("Vui l√≤ng ch·ªçn ng√†y c·∫ßn xo√°.");
    return;
  }

  if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° to√†n b·ªô ƒëi·ªÉm danh ng√†y n√†y?")) return;

  db.run(`
    DELETE FROM Attendance
    WHERE class_id = ? AND substr(attendance_date, 1, 10) = ?
  `, [classId, date]);

  saveToLocal();
  closeSuaNgay();
  loadClasses(classId);
}

// Nh·∫£y tab l·ªõp theo l·ªõp ch·ªçn tr√™n Form
function onChangeClassInThemHs() {
  const classId = document.getElementById("hs-class-select").value;
  switchTab(classId);
}





// M·ªü form Thu h·ªçc ph√≠
let pendingStudents = []; // Danh s√°ch h·ªçc sinh ch∆∞a thu
let currentIndex = 0;     // V·ªã tr√≠ hi·ªán t·∫°i trong danh s√°ch


function handleThuHocPhi() {
  document.getElementById("thuHocPhiModal").style.display = "flex";

  const classSelect = document.getElementById("thu-class");
  classSelect.innerHTML = "";

  const result = db.exec(`SELECT class_id, class_name FROM Classes`);
  const activeClassId = document.querySelector(".tab-button.active")?.dataset.classId;

  result[0].values.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    if (id == activeClassId) opt.selected = true;
    classSelect.appendChild(opt);
  });

  onChangeClassInThu(); // G·ªçi khi m·ªü l·∫ßn ƒë·∫ßu
}

function closeThuHocPhi() {
  document.getElementById("thuHocPhiModal").style.display = "none";
}

function onChangeClassInThu() {
  const classId = document.getElementById("thu-class").value;
  switchTab(classId);

  const studentSelect = document.getElementById("thu-student");
  studentSelect.innerHTML = "";

  // L·∫•y h·ªçc sinh ch∆∞a thu h·ªçc ph√≠
  const result = db.exec(`
    SELECT student_id, student_name FROM Students
    WHERE class_id = ${classId} AND noptien = 0
  `);

  pendingStudents = result[0]?.values || [];
  currentIndex = 0;

  if (pendingStudents.length === 0) {
    studentSelect.innerHTML = '<option disabled selected>üéâ T·∫•t c·∫£ h·ªçc sinh ƒë√£ thu</option>';
    document.getElementById("thu-money").value = "";
    return;
  }

  // T·∫°o danh s√°ch ch·ªçn
  pendingStudents.forEach(([id, name]) => {
    const opt = document.createElement("option");
    opt.value = id;
    opt.textContent = name;
    studentSelect.appendChild(opt);
  });

  // Ch·ªçn ng∆∞·ªùi ƒë·∫ßu ti√™n
  studentSelect.value = pendingStudents[0][0];
  updateTienThuHocPhi();
}



function updateTienThuHocPhi() {
  const classId = document.getElementById("thu-class").value;
  const studentId = document.getElementById("thu-student").value;

  // L·∫•y h·ªçc ph√≠ l·ªõp
  const hocphiRes = db.exec(`SELECT class_hocphi FROM Classes WHERE class_id = ${classId}`);
  const hocphi = hocphiRes[0]?.values[0][0] || 0;

  // ƒê·∫øm s·ªë bu·ªïi ƒë√£ ƒëi·ªÉm danh
  const buoiRes = db.exec(`
    SELECT COUNT(*) FROM Attendance
    WHERE class_id = ${classId} AND student_id = ${studentId} AND status = 1
  `);
  const sobuoi = buoiRes[0]?.values[0][0] || 0;
  const sotien = sobuoi * hocphi;

  document.getElementById("thu-money").value = sotien.toLocaleString() + " ƒë";
}

function submitThuHocPhi() {
  const classId = document.getElementById("thu-class").value;

  if (pendingStudents.length === 0) {
    alert("üéâ ƒê√£ thu h·ªçc ph√≠ xong.");
    closeThuHocPhi();
    return;
  }

  const [studentId, studentName] = pendingStudents[currentIndex];
  const className = document.getElementById("thu-class").selectedOptions[0].textContent;

  // T√≠nh ti·ªÅn
  const hocphi = db.exec(`SELECT class_hocphi FROM Classes WHERE class_id = ${classId}`)?.[0]?.values[0][0] || 0;
  const sobuoi = db.exec(`
    SELECT COUNT(*) FROM Attendance
    WHERE class_id = ${classId} AND student_id = ${studentId} AND status = 1
  `)?.[0]?.values[0][0] || 0;
  const money = sobuoi * hocphi;

  // C·∫≠p nh·∫≠t DB
  db.run(`UPDATE Students SET noptien = 1 WHERE student_id = ?`, [studentId]);
  const date = new Date().toISOString().split("T")[0];
  db.run(`
    INSERT INTO Thuhocphi (Thuhocphi_date, Thuhocphi_money, class_name, student_name, student_id)
    VALUES (?, ?, ?, ?, ?)
  `, [date, money, className, studentName, studentId]);

  saveToLocal();
  window.lastDiemDanh = {
  classId,
  studentId,
  active: true // ‚úÖ ƒë·ªÉ trigger scroll & highlight trong showClassData
};

  loadClasses(classId);
  updateThuHocPhiThongKe(classId);


  // Chuy·ªÉn sang h·ªçc sinh ti·∫øp theo
  currentIndex++;
  if (currentIndex >= pendingStudents.length) {
    alert("üéâ ƒê√£ thu h·ªçc ph√≠ xong.");
    closeThuHocPhi();
    return;
  }

  const nextStudent = pendingStudents[currentIndex];
  document.getElementById("thu-student").value = nextStudent[0];
  updateTienThuHocPhi();
}

function skipThuHocPhi() {
  if (pendingStudents.length === 0) {
    alert("üéâ ƒê√£ duy·ªát h·∫øt danh s√°ch.");
    closeThuHocPhi();
    return;
  }

  currentIndex++;

  if (currentIndex >= pendingStudents.length) {
    alert("üéâ ƒê√£ duy·ªát h·∫øt danh s√°ch.");
    closeThuHocPhi();
    return;
  }

  const nextStudent = pendingStudents[currentIndex];
  document.getElementById("thu-student").value = nextStudent[0];
  updateTienThuHocPhi();
}

function updateThuHocPhiThongKe(classId) {
  try {
    // L·∫•y h·ªçc ph√≠ m·ªói bu·ªïi c·ªßa l·ªõp
    const hocphiRes = db.exec(`SELECT class_hocphi FROM Classes WHERE class_id = ${classId}`);
    const hocphi = hocphiRes[0]?.values[0][0] || 0;

    // ƒê·∫øm s·ªë h·ªçc sinh ƒë√£ thu v√† ch∆∞a thu
    const daThuCountRes = db.exec(`SELECT COUNT(*) FROM Students WHERE class_id = ${classId} AND noptien = 1`);
    const daThuCount = daThuCountRes[0]?.values[0][0] || 0;

    const chuaThuCountRes = db.exec(`SELECT COUNT(*) FROM Students WHERE class_id = ${classId} AND noptien = 0`);
    const chuaThuCount = chuaThuCountRes[0]?.values[0][0] || 0;

    // T√≠nh t·ªïng s·ªë ti·ªÅn ƒë√£ thu (gi·ªëng logic C#)
    const daThuAmountRes = db.exec(`
      SELECT SUM(Tong_so * class_hocphi) FROM (
        SELECT student_id, COUNT(*) AS Tong_so FROM Attendance
        WHERE student_id IN (
          SELECT student_id FROM Students WHERE class_id = ${classId} AND noptien = 1
        ) AND status = 1
        GROUP BY student_id
      ) AS AttendanceSummary
      JOIN Students ON AttendanceSummary.student_id = Students.student_id
      JOIN Classes ON Students.class_id = Classes.class_id
    `);
    const tongTienDaThu = daThuAmountRes[0]?.values[0][0] || 0;

    // T√≠nh t·ªïng s·ªë ti·ªÅn ch∆∞a thu (gi·ªëng logic C#)
    const chuaThuAmountRes = db.exec(`
      SELECT SUM(Tong_so * class_hocphi) FROM (
        SELECT student_id, COUNT(*) AS Tong_so FROM Attendance
        WHERE student_id IN (
          SELECT student_id FROM Students WHERE class_id = ${classId} AND noptien = 0
        ) AND status = 1
        GROUP BY student_id
      ) AS AttendanceSummary
      JOIN Students ON AttendanceSummary.student_id = Students.student_id
      JOIN Classes ON Students.class_id = Classes.class_id
    `);
    const tongTienChuaThu = chuaThuAmountRes[0]?.values[0][0] || 0;

    // C·∫≠p nh·∫≠t giao di·ªán
    document.getElementById("count-dathu").textContent = daThuCount;
    document.getElementById("sum-dathu").textContent = tongTienDaThu.toLocaleString() + " ƒë";

    document.getElementById("count-chuathu").textContent = chuaThuCount;
    document.getElementById("sum-chuathu").textContent = tongTienChuaThu.toLocaleString() + " ƒë";

    // C·∫≠p nh·∫≠t progress
    const tong = tongTienDaThu + tongTienChuaThu;
    const percent = tong > 0 ? Math.round((tongTienDaThu / tong) * 100) : 0;
    document.getElementById("progress-percent").textContent = percent + "%";
    document.getElementById("progress-bar").style.width = percent + "%";
  } catch (err) {
    console.error("L·ªói th·ªëng k√™ thu h·ªçc ph√≠:", err.message);
  }
}


// G√°n s·ª± ki·∫øn cho 2 n√∫t ƒê√£ Thu v√† Ch∆∞a Thu
const btnDaThu = document.getElementById("btn-dathu");
btnDaThu.addEventListener("click", () => {
  const classId = document.querySelector(".tab-button.active")?.dataset.classId;
  if (!classId) return;

  thuFilterState.dathu = !thuFilterState.dathu;
  thuFilterState.chuathu = false;

  btnDaThu.classList.toggle("active", thuFilterState.dathu);
  document.getElementById("btn-chuathu").classList.remove("active");

  if (thuFilterState.dathu) {
    showClassData(classId, 1);
  } else {
    showClassData(classId);
  }
});


const btnChuaThu = document.getElementById("btn-chuathu");
btnChuaThu.addEventListener("click", () => {
  const classId = document.querySelector(".tab-button.active")?.dataset.classId;
  if (!classId) return;

  thuFilterState.chuathu = !thuFilterState.chuathu;
  thuFilterState.dathu = false;

  btnChuaThu.classList.toggle("active", thuFilterState.chuathu);
  document.getElementById("btn-dathu").classList.remove("active");

  if (thuFilterState.chuathu) {
    showClassData(classId, 0);
  } else {
    showClassData(classId);
  }
});


// ƒê√≥ng m·ªü b·∫£ng ch·ªçn file .db
function openDbModal() {
  document.getElementById("dbModal").style.display = "flex";
}

function closeDbModal() {
  document.getElementById("dbModal").style.display = "none";
}


// H√†m xu·∫•t file .db
function isStandaloneIOS() {
  return window.navigator.standalone === true;
}

function exportSQLite() {
  if (!db) {
    alert("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
    return;
  }

  const binaryArray = db.export();
  const blob = new Blob([binaryArray], { type: "application/octet-stream" });

  const today = new Date();
  const yyyy = today.getFullYear();
  const mm = String(today.getMonth() + 1).padStart(2, '0');
  const dd = String(today.getDate()).padStart(2, '0');
  const fileName = `QuanLyDayThem_${dd}-${mm}-${yyyy}.db`;

  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = fileName;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);

  // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p theo m√¥i tr∆∞·ªùng
  if (isStandaloneIOS()) {
    alert("üì¶ Sao l∆∞u c∆° s·ªü d·ªØ li·ªáu v√†o ·ª©ng d·ª•ng T·ªáp c·ªßa iPhone.\nCh·ªçn: 'M·ªü trong...' > 'L∆∞u v√†o T·ªáp' > 'L∆∞u'");
  } else {
    alert("üì¶ Sao l∆∞u c∆° s·ªü d·ªØ li·ªáu v√†o ·ª©ng d·ª•ng T·ªáp c·ªßa iPhone");
  }
}


function autoExportIfNeeded() {
  const LAST_EXPORT_KEY = "lastDbExportDate";
  const EXPORT_INTERVAL_DAYS = 15; // 15 ng√†y
  const lastExport = localStorage.getItem(LAST_EXPORT_KEY);
  const now = new Date();

  if (lastExport) {
    const lastDate = new Date(lastExport);
    const diffTime = now - lastDate;
    const diffDays = diffTime / (1000 * 60 * 60 * 24);

    if (diffDays < EXPORT_INTERVAL_DAYS) return; // ‚úÖ Ch∆∞a ƒë·∫øn 7 ng√†y, kh√¥ng export
  }

  exportSQLite(); // ‚úÖ G·ªçi export
  localStorage.setItem(LAST_EXPORT_KEY, now.toISOString()); // ‚úÖ Ghi nh·∫≠n l·∫ßn export
}
